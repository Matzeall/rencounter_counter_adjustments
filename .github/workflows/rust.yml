name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: macos-13
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install build-essential libxcb-shm0-dev libxcb-randr0-dev xcb git

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y git
        choco install -y llvm
        choco install -y mingw

    - name: Install dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install git
        brew install llvm
        brew install mingw-w64

    - name: Set up Rust
      run: rustup update stable

    - name: Build
      run: cargo build --release --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Archive build output (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir rencounter_counter
        cp target/release/rencounter_counter rencounter_counter/
        cp text-detection.rten rencounter_counter/
        cp text-recognition.rten rencounter_counter/

    - name: Archive build output (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir rencounter_counter
        cp target/release/rencounter_counter.exe rencounter_counter/
        cp text-detection.rten rencounter_counter/
        cp text-recognition.rten rencounter_counter/

    - name: Upload build output (Linux and macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ matrix.os }}-${{ matrix.arch || 'x86_64' }}
        path: rencounter_counter

    - name: Upload build output (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ matrix.os }}
        path: rencounter_counter

    - name: Get Release ID
      id: get_release
      if: github.event_name == 'release'
      run: |
        response=$(curl -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/${{ github.repository }}/releases/tags/19.05.2024)
        echo "RELEASE_ID=$(echo $response | jq -r .id)" >> $GITHUB_ENV

    - name: Update or Create Release
      if: github.event_name == 'release'
      run: |
        if [ -z "${{ env.RELEASE_ID }}" ] || [ "${{ env.RELEASE_ID }}" == "null" ]; then
          curl -X POST \
          -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{
            "tag_name": "19.05.2024",
            "name": "19.05.2024",
            "draft": false,
            "prerelease": false
          }'
        else
          curl -X PATCH \
          -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }} \
          -d '{
            "tag_name": "19.05.2024",
            "name": "19.05.2024",
            "draft": false,
            "prerelease": false
          }'
        fi

    - name: Upload Release Asset (Linux and macOS)
      if: github.event_name == 'release' && matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: build-output.zip
        asset_name: build-output-${{ matrix.os }}-${{ matrix.arch || 'x86_64' }}.zip
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: github.event_name == 'release' && matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: build-output.zip
        asset_name: build-output-${{ matrix.os }}.zip
        asset_content_type: application/zip
