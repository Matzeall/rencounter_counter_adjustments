name: Rust

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: windows-latest
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: x64
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install build-essential libxcb-shm0-dev libxcb-randr0-dev xcb git

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y git
        choco install -y llvm
        choco install -y mingw

    - name: Install dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install llvm

    - name: Create cargo bin directory (macOS)
      if: startsWith(matrix.os, 'macos')
      run: mkdir -p $HOME/.cargo/bin

    - name: Install Rustup (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env

    - name: Set up Rust
      run: rustup update stable

    - name: Build
      run: cargo build --release --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Archive build output (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir rencounter_counter
        cp target/release/rencounter_counter rencounter_counter/
        cp text-detection.rten rencounter_counter/
        cp text-recognition.rten rencounter_counter/

    - name: Archive build output (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir rencounter_counter
        cp target/release/rencounter_counter.exe rencounter_counter/
        cp text-detection.rten rencounter_counter/
        cp text-recognition.rten rencounter_counter/

    - name: Upload build output
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ matrix.os }}-${{ matrix.arch }}
        path: rencounter_counter

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download Linux build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-output-ubuntu-latest-x64
        path: build/linux/x64

    - name: Download Windows build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-output-windows-latest-x64
        path: build/windows/x64

    - name: Download macOS x64 build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-output-macos-latest-x64
        path: build/macos/x64

    - name: Download macOS arm64 build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-output-macos-13-arm64
        path: build/macos/arm64

    - name: Create tag
      id: create_tag
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
        git tag $TAG_NAME
        git push origin $TAG_NAME
        echo "::set-output name=TAG::$TAG_NAME"

    - name: Set release name
      id: set_release_name
      run: echo "RELEASE_NAME=Release $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.create_tag.outputs.TAG }}
        release_name: ${{ env.RELEASE_NAME }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/linux/build-output-ubuntu-latest-x64.zip
        asset_name: build-output-ubuntu-latest-x64.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/windows/build-output-windows-latest-x64.zip
        asset_name: build-output-windows-latest-x64.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS x64 Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/macos/x64/build-output-macos-latest-x64.zip
        asset_name: build-output-macos-latest-x64.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS arm64 Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/macos/arm64/build-output-macos-latest-arm64.zip
        asset_name: build-output-macos-latest-m1.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
