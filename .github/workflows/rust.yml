name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install build-essential libxcb-shm0-dev libxcb-randr0-dev xcb git

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y git
        choco install -y llvm
        choco install -y mingw

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install git
        brew install llvm
        brew install mingw-w64

    - name: Set up Rust
      run: rustup update stable

    - name: Build
      run: cargo build --release --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Archive build output (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: tar -czvf build-output.tar.gz target/release/

    - name: Archive build output (Windows)
      if: matrix.os == 'windows-latest'
      run: Compress-Archive -Path target\release\* -DestinationPath build-output.zip

    - name: Upload build output (Linux and macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: build-output-${{ matrix.os }}
        path: build-output.tar.gz

    - name: Upload build output (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: build-output-${{ matrix.os }}
        path: build-output.zip
